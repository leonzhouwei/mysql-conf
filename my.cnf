[client]
# 客户端字符集,控制 character_set_client、character_set_connection、
# character_set_results
default-character-set=utf8 

[mysql]
# 仅仅允许使用键值的 updates 和 deletes
no-auto-rehash 

[mysqld]
# myslqd 服务运行时的端口号
port=3306

# 
basedir=/usr/local/mysql-8.0.11-macos10.13-x86_64
datadir=/usr/local/mysql-8.0.11-macos10.13-x86_64/data


# Both location gets rotated by the cronjob.
# Be aware that this log type is a performance killer.
# As of 5.1 you can enable the log at runtime!
general_log_file=/var/log/mysql/mysql.log

#
# Error log - should be very few entries.
#
log_error=/var/log/mysql/error.log

# socket 文件是在 Linux 环境下特有的，用户的客户端软件连接可以不通过 TCP/IP 网络而直接使用 
# unix socket 连接到 Mysql。
socket=/tmp/mysql.sock

# 数据库和数据库表的默认字符集。(推荐 utf8,以免导致乱码)
character-set-server=utf8

# 避免 Mysql 的外部锁定，减少出错几率，增强稳定性。
skip-external-locking

# 开启该选项可以彻底关闭 MYSQL 的 TCP/IP 连接方式，如果 WEB 服务器是以远程连接的方式访问
# MYSQL 的数据库服务器，则不要开启该选项，否则将无法正常连接。
# skip-networking

# 禁止 MySql 对外部连接进行 DNS 解析，使用这一选项可以消除 MySQL 进行 NDS 解析的时间。
# 但需要注意的是：如果开启该选项，则所有远程主机连接授权都要使用 IP 地址方式了，否则
# MYSQL 将无法正常处理连接请求。
# skip-name-resolve

# back_log 参数的值指出在 MySQL 暂时停止响应新请求之前，短时间内的多少个请求可以被存在对堆栈中，
# 如果系统短时间内有很多连接，则需要增大该参数的值，该参数值指定到来的 TCP/IP 连接的监听队列的
# 大小。不同的操作系统在这个队列的大小有自己的限制，如果试图将 back_log 设定得高于操作系统的
# 限制将是无效的，其默认值为 50，对于 LINUX 系统而言，推荐设置为小于 512 的整数。
back_log=384

# 索引缓冲区大小，增加它可得到更好的索引处理性能，对于内存在 4GB 左右的服务器，该参数可设置为
# 256M 或 384M。如果该参数值设置的过大反而会使服务器的整体效率降低。
key_buffer_size=384M

# 设定在网络传输中一次消息传输量的最大值，系统默认值为 1 MB，最大值是 1 GB，必须设定为 
# 1024 的倍数，单位为字节。
max_allowed_packet=4M

# 设置 MySQL 每个线程的堆栈大小，默认值足够大，可满足普通操作。可设置范围为
# 128 KB 至 4 GB，默认 192K。
thread_stack=256k

# 设定查询排序时所能使用的缓冲区大小，系统默认大小为 2 MB，从 5.1.23 版本开始，
# 在除了 WINDOWS 之外的 64 位平台上可以 4 GB 的限制。该参数对应的分配内在是每个连接独占的，
# 如果有 100 个连接，那么实际分配的总排序缓冲区大小为 100*6＝600MB，那么对于内存 4 GB 
# 左右的服务器来说，推荐将其设置为 6 MB - 8 MB。
sort_buffer_size=6M

# 读查询操作所能使用的缓冲区大小，和 sort_buffer_size 一样，
# 该参数对应的分配内在也是每个连接独享。
read_buffer_size=4M

# 设置 Thread Cache 池中可以缓存的连接池线程最大数量，可设置为 0 - 16384,默认为 0。
# 1 GB 内存我们配置为 8，2 GB 内存我们配置为 16，4 GB 或 4 GB以上我们配置为 64。
thread_cache_size=64

# 指定 Mysql 查询缓冲区的大小，可以通过在 Mysql 控制台观察，如果 Qcache_lowmem_prunes 
# 的值非常大，则表明经常出现缓冲不够的情况，如果 Qcache_hits 的值非常大，
# 则表明查询缓冲使用的非常频繁
query_cache_size=64M

# 设置内在临时表最大值，如果超过该值，则会将临时表写入磁盘，其范围为 1 KB 至 4 GB。
tmp_table_size=256M

# 指定 MYSQL 允许的最大连接进程数，如果在访问程序时经常出现 TOO MANY CONNECTIONS 的错误提示，
# 则需要增大该参数值。
max_connections=5000

# 指定一个请求的最大连接时间，对于 4 GB 左右内在的服务器来说，可以将其设置为 5 － 10
wait_timeout=120

# 该参数取值为服务器逻辑 CPU 数量 * 2，比如，服务器有两个物理 CPU，每个物理 CPU 支持 
# HT 超线程，所以实际取值 4*2=8，这也是目前双四核主流服务器的配置。
innodb_thread_concurrency=8

# innodb_flush_log_at_trx_commit
# 抱怨 Innodb 比 MyISAM 慢 100 倍？那么你大概是忘了调整这个值。默认值 1 的意思是每一次
# 事务提交或事务外的指令都需要把日志写入（flush）硬盘，这是很费时的。特别是使用
# 电池供电缓存（Battery backed up cache）时。设成 2 对于很多运用，
# 特别是从 MyISAM 表转过来的是可以的，它的意思是不写入硬盘而是写入系统缓存。
# 日志仍然会每秒 flush 到硬 盘，所以你一般不会丢失超过 1-2 秒的更新。设成 0 会更快一点，
# 但安全方面比较差，MySQL 挂了可能会丢失事务的数据。而值 2 只会在整个操作系统挂了时才可能丢数据。
innodb_flush_log_at_trx_commit=2

# 这是 InnoDB 存储引擎的事务日志所使用的缓冲区。类似于 Binlog Buffer，
# InnoDB 在写事务日志的时候，为了提高性能，也是先将信息写入 Innofb Log Buffer 中，
# 当满足 innodb_flush_log_trx_commit 参数所设置的相应条件（或者日志缓冲区写满）之后，才会将
# 日志写到文件（或者同步到磁盘）中。可以通过 innodb_log_buffer_size 参数设置其可以使用的最大
# 内存空间。
innodb_log_buffer_size=2M

# 这个数字要根据实际的情况来设定，但对于大多数的情况，8 是一个比较合适的设置
innodb_thread_concurrency=8

# tmp_table_size 的默认大小是 32M。如果一张临时表超出该大小，MySQL 产生一个 The table 
# tbl_name is full 形式的错误，如果你做很多高级 GROUP BY 查询，增加 tmp_table_size 值。
tmp_table_size=64M

# 随机读取数据缓冲区使用内存(read_rnd_buffer_size)：和顺序读取相对应，当 MySQL 进行非顺序读
# 取（随机读取）数据块的时候，会利用这个缓冲区暂存读取的数据。如根据索引信息读取表数据，根据排序后
# 的结果集与表进行 Join 等等。总的来说，就是当数据块的读取需要满足一定的顺序的情况下，MySQL 就需
# 要产生随机读取，进而使用到 read_rnd_buffer_size 参数所设置的内存缓冲区。
read_rnd_buffer_size=16M

# 你最好在定义数据库命名规则的时候就全部采用小写字母加下划线的组合，而不使用任何的大写字母。
lower_case_table_names=1

# 设置校验模式
sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES

# 默认配置没开查询缓存
explicit_defaults_for_timestamp

# 慢查询的执行用时上限,默认设置是 10s,推荐(1s ~ 2s)
long_query_time=1

# 
log_queries_not_using_indexes

